
# if you run this you may incur charges

# create the two security groups
aws ec2 create-security-group --group-name group-internal-1380 --description "internal 1380"
aws ec2 create-security-group --group-name group-client-1380   --description "client 1380"

# get their actual ids

SG_CLIENT=$(aws ec2 describe-security-groups --group-names     group-client-1380 | jq -r .SecurityGroups[0].GroupId)
SG_INTERNAL=$(aws ec2 describe-security-groups --group-names group-internal-1380 | jq -r .SecurityGroups[0].GroupId)

# ingress rules
aws ec2 authorize-security-group-ingress --group-id "$SG_INTERNAL" --protocol tcp --port 22   --cidr 0.0.0.0/0
aws ec2 authorize-security-group-ingress --group-id "$SG_INTERNAL" --protocol tcp --port 8080 --source-group "$SG_INTERNAL"
aws ec2 authorize-security-group-ingress --group-id "$SG_INTERNAL" --protocol tcp --port 8080 --source-group "$SG_CLIENT"

# client group
aws ec2 authorize-security-group-ingress --group-id "$SG_CLIENT" --protocol tcp --port 22   --cidr 0.0.0.0/0
aws ec2 authorize-security-group-ingress --group-id "$SG_CLIENT" --protocol tcp --port 8080 --cidr 0.0.0.0/0 
aws ec2 authorize-security-group-ingress --group-id "$SG_CLIENT" --protocol tcp --port 8080 --source-group "$SG_CLIENT"

# key pair
aws ec2 create-key-pair \
    --key-name keypair-1380 \
    --key-type rsa \
    --key-format pem \
    --query "KeyMaterial" \
    --output text > keypair-1380.pem \

# client
aws ec2 run-instances \
    --image-id ami-0aafdae616ee7c9b7 \
    --count 1 \
    --instance-type t2.micro \
    --key-name keypair-1380 \
    --security-group-ids $SG_CLIENT \

# internal
aws ec2 run-instances \
    --image-id ami-0aafdae616ee7c9b7 \
    --count 5 \
    --instance-type t2.micro \
    --key-name keypair-1380 \
    --security-group-ids "$SG_INTERNAL" \

# gather the ips
aws ec2 describe-instances --filters "Name=instance.group-id,Values=$SG_CLIENT" \
    | jq -r '.Reservations[].Instances[0].InstanceId' \
    | xargs aws ec2 describe-instances --instance-ids \
    | jq '[.Reservations[].Instances[0].NetworkInterfaces[0].Association.PublicIp]' \
    > client.json

aws ec2 describe-instances --filters "Name=instance.group-id,Values=$SG_INTERNAL" \
    | jq -r '.Reservations[].Instances[0].InstanceId' \
    | xargs aws ec2 describe-instances --instance-ids \
    | jq '[.Reservations[].Instances[0].PrivateIpAddress]' \
    > internal-private.json

# gather the ips
aws ec2 describe-instances --filters "Name=instance.group-id,Values=$SG_INTERNAL" \
    | jq -r '.Reservations[].Instances[0].InstanceId' \
    | xargs aws ec2 describe-instances --instance-ids \
    | jq '[.Reservations[].Instances[0].NetworkInterfaces[0].Association.PublicIp]' \
    > internal-public.json

add_group() {
    local ip="$1"
    local gid="$2"
    local ipg="$3"
    local d
    d=$(node -e "console.log(require('../distribution/util/serialization.js').serialize(['$gid', {ip: '$ipg', port: 8080}]))")
    curl -s -X POST "$ip:8080/groups/add" -d "$d"
}

client=$(jq -rn '$client | .[]' --argfile client client.json)
internals=$(jq -rn '$internal | .[]' --argfile internal internal-private.json)
ips=$(jq -rn '$internal + $client | .[]' --argfile internal internal-public.json --argfile client client.json)

for ip in $ips; do
    ssh -i keypair-1380.pem "admin@$ip" 'sudo apt update && sudo apt install -y nodejs git vim npm'
    ssh -i keypair-1380.pem "admin@$ip" 'mkdir -p final && rm -rf final/distribution'
    scp -r -i keypair-1380.pem ../distribution.js ../distribution ../package.json "admin@$ip:~/final"
    ssh -i keypair-1380.pem "admin@$ip" 'cd final; npm install; pkill node; nohup ./distribution.js > /dev/null 2>&1 &'

    add_group "$ip" "client" "$client"

    add_group "$ip" "authoritativeStudents" "${internals[0]}"
    add_group "$ip" "authoritativeCourses" "${internals[0]}"

    add_group "$ip" "students" "${internals[1]}"
    add_group "$ip" "courses" "${internals[2]}"

    add_group "$ip" "students" "${internals[3]}"
    add_group "$ip" "courses" "${internals[4]}"
done

ssh -i keypair-1380.pem admin@52.53.219.31
